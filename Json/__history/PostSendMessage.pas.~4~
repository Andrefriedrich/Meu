unit PostSendMessage;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, REST.Client, REST.JSON, REST.Types, Data.Bind.Components,
  Data.Bind.ObjectScope, System.JSON, Unit2;

type
  TModalSucesso = class
  public
    beneficios: TArray<string>;  // Um array de strings para os benefícios
  end;

  TMeuObjeto = class
  public
    modal_fim_trial: TModalSucesso;  // Pode ter outros campos, mas estamos mapeando a parte "beneficios"
  end;

  TForm1 = class(TForm)
    btnPostMessage: TButton;
    btnSendMessage: TButton;
    Button1: TButton;
    Button2: TButton;
    procedure btnPostMessageClick(Sender: TObject);
    procedure btnSendMessageClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
    procedure ConsomeJSON;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  Form2: TForm2;  // Declaração de Form2 para garantir que está acessível

implementation

{$R *.dfm}

const
  WM_USER_MESSAGE = WM_USER + 1;

procedure TForm1.btnPostMessageClick(Sender: TObject);
begin
  // Enviar mensagem para Form2 usando PostMessage
  PostMessage(Form2.Handle, WM_USER_MESSAGE, 0,
    LPARAM(PChar('PostMessage: Envia a mensagem de forma assíncrona, ou seja, a função retorna imediatamente, sem esperar que a mensagem seja processada.')));
end;

procedure TForm1.btnSendMessageClick(Sender: TObject);
begin
  // Enviar mensagem para Form2 usando SendMessage
  SendMessage(Form2.Handle, WM_USER_MESSAGE, 0,
    LPARAM(PChar('SendMessage: Envia a mensagem de forma síncrona, ou seja, o código aguarda até que a mensagem seja processada antes de continuar.')));
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
  Form2.Show;
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
  ConsomeJSON;
end;

procedure TForm1.ConsomeJSON;
var
  Client: TRESTClient;
  Request: TRESTRequest;
  Response: TRESTResponse;
  MyObject: TMeuObjeto;
  i: Integer;
begin
  Client := TRESTClient.Create('https://docs.nextar.com.br/trial/textos_trial_pt_v2.json');
  Request := TRESTRequest.Create(nil);
  Response := TRESTResponse.Create(nil);
  try
    Request.Client := Client;
    Request.Response := Response;
    Request.Method := rmGET;
    Request.Execute;

    if Response.StatusCode = 200 then
    begin
      // Exibe o conteúdo do JSON retornado
      ShowMessage(Response.Content);

      // Tenta converter o conteúdo JSON para o objeto Delphi
      MyObject := TJson.JsonToObject<TMeuObjeto>(Response.Content);

      // Verifica se o objeto foi mapeado corretamente
      if Assigned(MyObject) then
      begin
        // Verifica se a chave modal_fim_trial e beneficios estão presentes
        if Assigned(MyObject.modal_fim_trial) then
        begin
          // Acessa os benefícios
          for i := 0 to High(MyObject.modal_fim_trial.beneficios) do
            ShowMessage('Benefício: ' + MyObject.modal_fim_trial.beneficios[i]);
        end
        else
          ShowMessage('Erro: modal_fim_trial não encontrado no JSON.');
      end
      else
        ShowMessage('Erro ao mapear o objeto.');
    end
    else
      ShowMessage('Erro ao consumir JSON: ' + Response.StatusText);
  finally
    Response.Free;
    Request.Free;
    Client.Free;
  end;
end;

end.

